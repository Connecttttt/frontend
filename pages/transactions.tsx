import Head from "next/head";
import styles from "@/styles/Transactions.module.css";
import { Navbar } from "@/components/Navbar";
import { useEffect, useState } from "react";
import { ActiveTransactions } from "@/components/ActiveTransactions";
import { PendingTransactions } from "@/components/PendingTransactions";
import { UnacceptedTransactions } from "@/components/UnacceptedTransactions";
import { CompletedTransactions } from "@/components/CompletedTransactions";

import { MetaMaskConnector } from "wagmi/connectors/metaMask";
import { useAccount, useConnect } from "wagmi";
import { ADDRESS_ZERO } from "@/utils";

export default function Transactions() {
  const [selectedTransaction, setSelectedTransaction] = useState(0);

  const connector = new MetaMaskConnector();
  const { connect } = useConnect();
  const { address } = useAccount({
    onConnect({ address }) {
      // @ts-ignore
      localStorage.setItem("connected", address);
    },
    // @ts-ignore
    onDisconnect({ address }) {
      // @ts-ignore
      localStorage.setItem("connected", ADDRESS_ZERO);
    },
  });

  useEffect(() => {
    let connected = localStorage.getItem("connected");
    console.log("CNCTD", connected);
    // @ts-ignore
    if (connected != ADDRESS_ZERO) connect({ connector });
  }, []);

  // TEST VARIABLES
  return (
    <>
      <Head>
        <title>Bridge | Transactions</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=dev ice-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <main className="main">
        {/* @ts-ignore */}
        <Navbar />

        <div className={styles.transactionsBar}>
          <p
            className={
              selectedTransaction == 0
                ? styles.selectedTransaction
                : styles.normalTransaction
            }
            onClick={() => {
              setSelectedTransaction(0);
            }}
          >
            Active
          </p>
          <p
            className={
              selectedTransaction == 1
                ? styles.selectedTransaction
                : styles.normalTransaction
            }
            onClick={() => {
              setSelectedTransaction(1);
            }}
          >
            Pending
          </p>
          <p
            className={
              selectedTransaction == 2
                ? styles.selectedTransaction
                : styles.normalTransaction
            }
            onClick={() => {
              setSelectedTransaction(2);
            }}
          >
            Unaccepted
          </p>
          <p
            className={
              selectedTransaction == 3
                ? styles.selectedTransaction
                : styles.normalTransaction
            }
            onClick={() => {
              setSelectedTransaction(3);
            }}
          >
            Completed
          </p>
        </div>

        {selectedTransaction == 0 && <ActiveTransactions />}

        {selectedTransaction == 1 && <PendingTransactions />}

        {selectedTransaction == 2 && <UnacceptedTransactions />}

        {selectedTransaction == 3 && <CompletedTransactions />}
      </main>
    </>
  );
}
