import Head from "next/head";
import styles from "@/styles/Account.module.css";
import { Navbar } from "@/components/Navbar";
import { useEffect, useState } from "react";

import { MetaMaskConnector } from "wagmi/connectors/metaMask";
import {
  useAccount,
  useConnect,
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
} from "wagmi";
import {
  ADDRESS_ZERO,
  BRIDGE_CONTRACT_ADDRESS,
  BRIDGE_TOKEN_ADDRESS,
} from "@/utils";
import { BRIDGE_CONTRACT_ABI, BRIDGE_TOKEN_aBI } from "@/abi";

export default function Account() {
  const [fundAmount, setFundAmount] = useState();
  const [withdrawAmount, setWithdrawAmount] = useState();
  const [mintAmount, setMintAmount] = useState();

  const connector = new MetaMaskConnector();
  const { connect } = useConnect();
  const { address, isConnected } = useAccount({
    onConnect({ address }) {
      // @ts-ignore
      localStorage.setItem("connected", address);
    },
    // @ts-ignore
    onDisconnect({}) {
      // @ts-ignore
      localStorage.setItem("connected", ADDRESS_ZERO);
    },
  });

  useEffect(() => {
    let connected = localStorage.getItem("connected");
    console.log("CNCTD", connected);
    // @ts-ignore
    if (connected != ADDRESS_ZERO) connect({ connector });
  }, []);

  //@ts-ignore
  const displayBalance = (balance: string) => {
    // @ts-ignore
    if (balance == "0") {
      return "0.00";
    } else {
      // @ts-ignore
      return (balance / 10 ** 18).toFixed(2);
    }
  };

  //////// SMART CONTRACT READ FUNCTION /////

  const { data: userName } = useContractRead({
    address: BRIDGE_CONTRACT_ADDRESS,
    abi: BRIDGE_CONTRACT_ABI,
    functionName: "getUsername",
    args: [address && address],
  });

  const { data: userDetails } = useContractRead({
    address: BRIDGE_CONTRACT_ADDRESS,
    abi: BRIDGE_CONTRACT_ABI,
    functionName: "getUserDetails",
    args: [address && address],
  });

  ///////// SMART CONTRACT WRITE FUNCTIONS ///////////

  const { config: fundConfig } = usePrepareContractWrite({
    address: BRIDGE_CONTRACT_ADDRESS,
    abi: BRIDGE_CONTRACT_ABI,
    functionName: "fundAccount",
    args: [fundAmount && fundAmount * 10 ** 18],
  });
  const { write: fund } = useContractWrite(fundConfig);

  const { config: withdrawConfig } = usePrepareContractWrite({
    address: BRIDGE_CONTRACT_ADDRESS,
    abi: BRIDGE_CONTRACT_ABI,
    functionName: "withdrawFromAccount",
    args: [withdrawAmount && withdrawAmount * 10 ** 18],
  });
  const { write: withdraw } = useContractWrite(withdrawConfig);

  const { config: mintConfig } = usePrepareContractWrite({
    address: BRIDGE_TOKEN_ADDRESS,
    abi: BRIDGE_TOKEN_aBI,
    functionName: "mintFree",
    args: [address, mintAmount && mintAmount * 10 ** 18],
  });
  const { write: mint } = useContractWrite(mintConfig);

  const { config: approveConfig } = usePrepareContractWrite({
    address: BRIDGE_TOKEN_ADDRESS,
    abi: BRIDGE_TOKEN_aBI,
    functionName: "approve",
    args: [BRIDGE_CONTRACT_ADDRESS, fundAmount && fundAmount * 10 ** 18],
  });
  const { write: approve } = useContractWrite(approveConfig);

  useEffect(() => {
    let connected = localStorage.getItem("connected");
    console.log("CNCTD", connected);
    // @ts-ignore
    if (connected != ADDRESS_ZERO) connect({ connector });
  }, []);

  return (
    <>
      <Head>
        <title>Bridge | Transactions</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=dev ice-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <main className="main">
        {/* @ts-ignore */}
        <Navbar />

        <div className={styles.accountContent}>
          <div className={styles.topBar}>
            {/* @ts-ignore */}
            <h3>Welcome {userName && userName},</h3>
          </div>

          <div className={styles.accountDetails}>
            <div className={styles.top}>
              <div className={styles.inputContainer}>
                <p>
                  Fund Acount With <span>Bridge</span> Tokens
                </p>

                <div className={styles.inputAndBtn}>
                  <input
                    //  @ts-ignore
                    onChange={(e) => setFundAmount(e.target.value)}
                    placeholder="Amount"
                  />
                  <button disabled={!fund} onClick={() => fund?.()}>
                    Fund
                  </button>
                  <button
                    style={{ marginLeft: "10px" }}
                    disabled={!approve}
                    onClick={() => approve?.()}
                  >
                    Approve
                  </button>
                </div>
              </div>

              <div className={styles.inputContainer}>
                <p>
                  Withdraw <span>Bridge</span> Tokens
                </p>

                <div className={styles.inputAndBtn}>
                  <input
                    //  @ts-ignore
                    onChange={(e) => setWithdrawAmount(e.target.value)}
                    placeholder="Amount"
                  />
                  <button disabled={!withdraw} onClick={() => withdraw?.()}>
                    Withdraw
                  </button>
                </div>
              </div>
            </div>

            <div className={styles.bottom}>
              <div className={styles.inputContainer}>
                <p>
                  Mint <span>Bridge</span> Tokens: Faucet
                </p>

                <div className={styles.inputAndBtn}>
                  <input
                    //  @ts-ignore
                    onChange={(e) => setMintAmount(e.target.value)}
                    placeholder="Amount"
                  />
                  <button
                    className={styles.mint}
                    disabled={!mint}
                    onClick={() => mint?.()}
                  >
                    Mint
                  </button>
                </div>
              </div>

              <div className={styles.accountStats}>
                <div className={styles.accountStat}>
                  <span>Total Transactions</span>
                  {/* @ts-ignore */}
                  <p>
                    {/* @ts-ignore */}
                    {userDetails && userDetails.totalTransactions.toString()}
                  </p>
                </div>

                <div className={styles.accountStat}>
                  <span>Succesfull Transactions</span>
                  {/* @ts-ignore */}
                  <p>
                    {userDetails &&
                      //  @ts-ignore
                      userDetails.succesfullTransactions.toString()}
                  </p>
                </div>

                <div className={styles.accountStat}>
                  <span>Null Transactions</span>
                  {/* @ts-ignore */}
                  <p>
                    {/*  @ts-ignore */}
                    {userDetails && userDetails.nulllTransactions.toString()}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
